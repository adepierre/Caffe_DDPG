layer {
	name: "Input"
	type: "Input"
	top: "state"
	top: "q_label"
	input_param {
		shape {
			dim: 24
			dim: 2
		}
		
		shape {
			dim: 24
			dim: 1
		}
	}
}

# Actor part of the net

layer {
	name: "actor_ip1"
	type: "InnerProduct"
	bottom: "state"
	top: "actor_ip1"

	inner_product_param {
		num_output: 20
		weight_filler {
		type: "gaussian"
		std: 0.1
		}
		bias_filler {
		type: "constant"
		}
	}
	
	param {
		lr_mult: 0.1
	}
}

layer {
  name: "actor_relu1"
  type: "ReLU"
  bottom: "actor_ip1"
  top: "actor_ip1"
  relu_param {
	negative_slope: 0.01
  }
}

layer {
	name: "actor_ip2"
	type: "InnerProduct"
	bottom: "actor_ip1"
	top: "actor_ip2"

	inner_product_param {
		num_output: 10
		weight_filler {
		type: "gaussian"
		std: 0.1
		}
		bias_filler {
		type: "constant"
		}
	}
	
	param {
		lr_mult: 0.1
	}
}

layer {
  name: "actor_relu2"
  type: "ReLU"
  bottom: "actor_ip2"
  top: "actor_ip2"
  relu_param {
	negative_slope: 0.01
  }
}

layer {
	name: "ActionLayer"
	type: "InnerProduct"
	bottom: "actor_ip2"
	top: "action"

	inner_product_param {
		num_output: 1
		weight_filler {
		type: "gaussian"
		std: 0.1
		}
		bias_filler {
		type: "constant"
		}
	}
	
	param {
		lr_mult: 0.1
	}
}

# Here we merge state and actions to input
# in the critic part of the net
layer {
  name: "concat"
  type: "Concat"
  bottom: "state"
  bottom: "action"
  top: "critic_input"
  concat_param {
	axis: 1
  }
}

layer {
	name: "critic_ip1"
	type: "InnerProduct"
	bottom: "critic_input"
	top: "critic_ip1"

	inner_product_param {
		num_output: 20
		weight_filler {
		type: "gaussian"
		std: 0.1
		}
		bias_filler {
		type: "constant"
		}
	}
}

layer {
  name: "critic_relu1"
  type: "ReLU"
  bottom: "critic_ip1"
  top: "critic_ip1"
  relu_param {
	negative_slope: 0.01
  }
}

layer {
	name: "critic_ip2"
	type: "InnerProduct"
	bottom: "critic_ip1"
	top: "critic_ip2"

	inner_product_param {
		num_output: 10
		weight_filler {
		type: "gaussian"
		std: 0.1
		}
		bias_filler {
		type: "constant"
		}
	}
}

layer {
  name: "critic_relu2"
  type: "ReLU"
  bottom: "critic_ip2"
  top: "critic_ip2"
  relu_param {
	negative_slope: 0.01
  }
}

layer {
	name: "QLayer"
	type: "InnerProduct"
	bottom: "critic_ip2"
	top: "q_values"

	inner_product_param {
		num_output: 1
		weight_filler {
		type: "gaussian"
		std: 0.1
		}
		bias_filler {
		type: "constant"
		}
	}
}

layer {
	name: "loss"
	type: "EuclideanLoss"
	bottom: "q_values"
	bottom: "q_label"
	top: "loss"
}